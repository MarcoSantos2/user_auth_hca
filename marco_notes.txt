##CONTROLLER
Purpose: Manages the REST interface to the business logic.


##SERVICE LAYER
Purpose: Contains the business logic implementations.


##REPOSITORY LAYER
Purpose: Manages storage and retrieval of entity beans (in this case, user entities) from the database.


We organized your project following the Controller-Service-Repository design pattern, which is a common pattern for structuring code in a maintainable way, especially in larger applications.
Each layer has a specific responsibility:
-Controller: Handles HTTP requests and responses, interacting with the service layer.
-Service: Contains the business logic of the application.
-Repository: Handles interactions with the database or any data storage.

##OVERALL FLOW
User Signup Flow:
1 A user sends a POST request to /api/users/signup with their Google authentication data.
2 The googleAuth middleware authenticates the user with Google.
3 The request is passed to the userController.signup method.
4 The controller calls userService.signup, which handles the business logic (e.g., checking if the user exists, saving the user, generating a token).
5 The response (JWT token) is sent back to the client.
User Signin Flow:
1 A user sends a POST request to /api/users/signin.
2 The googleAuth middleware authenticates the user with Google.
3 The request is passed to the userController.signin method.
4 The controller calls userService.signin, which handles the business logic (e.g., verifying the password, generating a token).
5 The response (JWT token) is sent back to the client.


CHANGES:
-Separation of Concerns: The business logic and database interaction were moved out of the route handlers and into the Service layer. This allows for cleaner, more testable code.
-Controllers: The Controller now simply forwards the request to the Service layer and handles the response to the client.
-Service Layer: Handles the core logic of signing up and signing in users, managing user data, and generating tokens.
-Routing Layer: The route handlers (users.ts) are now only responsible for routing requests to the appropriate controller method.

What Stayed the Same:
-Routes and Middleware: The routing and middleware (googleAuth) structure remains largely the same. The overall flow from a request to a response is unchanged, but the responsibilities are better distributed.
-Functionality: The core functionality—user sign-up, sign-in, and token generation—is still intact, but the structure is more maintainable.